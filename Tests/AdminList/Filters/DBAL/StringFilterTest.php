<?php
namespace Kunstmaan\AdminListBundle\Tests\AdminList\Filters\DBAL;

use Kunstmaan\AdminListBundle\AdminList\Filters\DBAL\StringFilter;
use Symfony\Component\HttpFoundation\Request;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-26 at 13:21:33.
 */
class StringFilterTest extends DBALFilterTestCase
{
    /**
     * @var StringFilter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new StringFilter('string', 'e');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kunstmaan\AdminListBundle\AdminList\Filters\DBAL\StringFilter::bindRequest
     */
    public function testBindRequest()
    {
        $request = new Request(array('filter_comparator_string' => 'equals', 'filter_value_string' => 'TheStringValue'));

        $data = array();
        $uniqueId = 'string';
        $this->object->bindRequest($request, $data, $uniqueId);

        $this->assertEquals(array('comparator' => 'equals', 'value' => 'TheStringValue'), $data);
    }

    /**
     * @covers Kunstmaan\AdminListBundle\AdminList\Filters\DBAL\StringFilter::apply
     * @dataProvider applyDataProvider
     */
    public function testApply($comparator, $whereClause, $value, $testValue)
    {
        $qb = $this->getQueryBuilder();
        $qb->select('*')
            ->from('entity', 'e');
        $this->object->setQueryBuilder($qb);
        $this->object->apply(array('comparator' => $comparator, 'value' => $value), 'string');

        $this->assertEquals("SELECT * FROM entity e WHERE e.string $whereClause", $qb->getSQL());
        $this->assertEquals($testValue, $qb->getParameter('var_string'));
    }

    public static function applyDataProvider()
    {
        return array(
            array('equals', '= :var_string', 'AStringValue1', 'AStringValue1'),
            array('notequals', '<> :var_string', 'AStringValue2', 'AStringValue2'),
            array('contains', 'LIKE :var_string', 'AStringValue3', '%AStringValue3%'),
            array('doesnotcontain', 'NOT LIKE :var_string', 'AStringValue4', '%AStringValue4%'),
            array('startswith', 'LIKE :var_string', 'AStringValue5', 'AStringValue5%'),
            array('endswith', 'LIKE :var_string', 'AStringValue6', '%AStringValue6'),
        );
    }

    /**
     * @covers Kunstmaan\AdminListBundle\AdminList\Filters\DBAL\StringFilter::getTemplate
     */
    public function testGetTemplate()
    {
        $this->assertEquals('KunstmaanAdminListBundle:Filters:stringFilter.html.twig', $this->object->getTemplate());
    }
}
